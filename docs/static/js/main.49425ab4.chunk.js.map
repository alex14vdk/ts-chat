{"version":3,"sources":["redux/types.ts","redux/redusers/message.ts","redux/redusers/auth.ts","redux/redusers/option.ts","redux/redusers/dialogues.ts","redux/reduser.ts","redux/store.ts","redux/actions/option.ts","components/Loading/index.tsx","components/DialogueList/index.tsx","redux/actions/dialogues.ts","utils/getDataFunc.ts","utils/localStorage.ts","containers/DialogueList.tsx","redux/actions/message.ts","components/MessageEditPanel/index.tsx","containers/MessageEditPanel.tsx","components/Message/index.tsx","containers/Message.tsx","utils/timeConverter.ts","components/ChatBox/index.tsx","containers/ChatBox.tsx","components/ChatForm/index.tsx","containers/ChatForm.tsx","redux/actions/auth.ts","components/ChatNav/index.tsx","containers/ChatNav.tsx","components/Chat/index.tsx","components/LoginForm/index.tsx","containers/LoginForm.tsx","components/App/index.tsx","containers/App.tsx","index.tsx"],"names":["DIALOGUE_LIST","CHAT_TYPE","MESSAGE_EDIT_PANEL","CHAT_MESSAGE_EDIT_MODE","DIALOGUES_REQUEST","DIALOGUES_SUCCESS","DIALOGUES_FAILURE","MESSAGES_SUCCESS","MESSAGES_REQUEST","MESSAGES_FAILURE","CHAT_MESSAGE_ADD","CHAT_MESSAGE_EDIT","CHAT_MESSAGE_DELETE","USER_LOGIN","USER_LOGOUT","initialState","messages","loading","error","message","state","action","type","payload","map","id","idMessage","text","messageText","filter","item","curUser","isAuth","auth","dialogueListOpen","messageEditPanel","curMessageType","messageEditText","option","dialogues","combineReducers","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunkMiddleware","dialogueListToggle","opened","messagePanelOpen","messageTypeChange","idType","Loading","chat","loadingClasses","classNames","className","DialogueList","divRef","messageTypeChangeHandler","messageClasses","dialogueItemClasses","getIcon","objIcon","iconName","icon","e","ref","name","onClick","Icons","getDialoguesList","dispatch","axios","get","headers","then","data","setTimeout","dialogueLoad","dialogueError","LocalStorageMess","LOCAL_STORAGE_KEY","getChat","JSON","parse","localStorage","getItem","this","setChat","setItem","stringify","LocalStorageCurUser","getUser","setUser","userName","LocalStorageOpt","CUR_MESSAGE_TYPE_ID","DIALOGUE_LIST_OPEN","getOption","user","ls","setOption","value","dialogOutclickClassIgnor","DialogueListContainer","useSelector","useDispatch","useEffect","oldMesType","initialOption","useOnclickOutside","ignoreClass","preventDefault","messagesLoad","getAllMessages","localStorageMessages","LocalStorageSiteVisited","length","messagesError","MessageEditPanel","onEditMessage","onDeleteMessage","title","messageOutclickClassIgnor","MessageEditPanelContainer","messageId","event","Message","reFormatDate","dataProp","messagePanel","author","messageBlockClasses","MessageContainer","timestamp","a","Date","month","getMonth","day","getDate","hour","getHours","min","getMinutes","timeConverter","date","ChatBox","messagesRef","chatBoxClassNames","ChatBoxContainer","useRef","scrollToBottom","current","scrollTo","scrollHeight","ChatForm","inputRef","changeHandler","enterForSubmit","clickForSubmit","formClasses","placeholder","onChange","onKeyPress","ChatFormContainer","messageEditElement","useState","setMessage","addMessageDispatch","newMessageData","now","focus","addNewMessage","trim","target","key","userLogin","ChatNav","onLogoutHandler","onChatListToggle","ChatNavContainer","window","location","reload","Chat","LoginForm","onChangeHandler","onSubmitHandler","LoginFormContainer","props","setUserName","savedUser","curUserName","App","Fragment","AppContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49425ab4.chunk.js","sourcesContent":["export const DIALOGUE_LIST = 'option/CHAT_LIST';\r\nexport const CHAT_TYPE = 'option/CHAT_TYPE_CHANGE';\r\nexport const MESSAGE_EDIT_PANEL = 'option/MESSAGE_PANEL';\r\nexport const CHAT_MESSAGE_EDIT_MODE = 'option/CHAT_MESSAGE_EDIT_MODE';\r\n\r\nexport const DIALOGUES_REQUEST = \"dialogues/USER_LIST_REQUEST\";\r\nexport const DIALOGUES_SUCCESS = \"dialogues/USER_LIST_SUCCESS\";\r\nexport const DIALOGUES_FAILURE = \"dialogues/USER_LIST_FAILURE\";\r\n\r\nexport const MESSAGES_SUCCESS = 'message/MESSAGES_SUCCESS';\r\nexport const MESSAGES_REQUEST = \"message/MESSAGES_REQUEST\";\r\nexport const MESSAGES_FAILURE = \"message/MESSAGES_FAILURE\";\r\nexport const CHAT_MESSAGE_ADD = 'message/CHAT_MESSAGE_ADD';\r\nexport const CHAT_MESSAGE_EDIT = 'message/CHAT_MESSAGE_EDIT';\r\nexport const CHAT_MESSAGE_DELETE = 'message/CHAT_MESSAGE_DELETE';\r\n\r\nexport const USER_LOGIN = 'auth/USER_LOGIN';\r\nexport const USER_LOGOUT = 'auth/USER_LOGOUT';","import {AnyAction} from 'redux';\r\nimport {IMessage} from '../../interfaces';\r\nimport {\r\n    MESSAGES_SUCCESS,\r\n    CHAT_MESSAGE_ADD,\r\n    MESSAGES_REQUEST,\r\n    MESSAGES_FAILURE,\r\n    CHAT_MESSAGE_EDIT,\r\n    CHAT_MESSAGE_DELETE\r\n} from '../types';\r\n\r\nexport interface IMessageState {\r\n    messages: IMessage[],\r\n    loading: boolean,\r\n    error: any\r\n}\r\n\r\nexport const initialState: IMessageState = {\r\n    messages: [],\r\n    loading: true,\r\n    error: null\r\n};\r\n\r\nconst message = (state = initialState, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case MESSAGES_REQUEST:\r\n            return {\r\n                ...state,\r\n                messages: []\r\n            };\r\n        case MESSAGES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                messages: action.payload,\r\n                loading: false\r\n            };\r\n        case MESSAGES_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload,\r\n            };\r\n\r\n        case CHAT_MESSAGE_ADD:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.payload]\r\n            };\r\n        case CHAT_MESSAGE_EDIT:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages.map(\r\n                    message => {\r\n                        if (message.id === action.payload.idMessage) {\r\n                            message.text = action.payload.messageText;\r\n                        }\r\n                        return message;\r\n                    }\r\n                )]\r\n            }\r\n        case CHAT_MESSAGE_DELETE:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages.filter(item => item.id !== action.payload)]\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default message;","import {AnyAction} from 'redux';\r\nimport {USER_LOGIN, USER_LOGOUT} from \"../types\";\r\n\r\nexport interface IAuthState {\r\n    curUser: string\r\n    isAuth: boolean\r\n}\r\n\r\nexport const initialState: IAuthState = {\r\n    curUser: '',\r\n    isAuth: false\r\n};\r\n\r\nconst auth = (state = initialState, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case USER_LOGIN:\r\n            return {\r\n                ...state,\r\n                curUser: action.payload,\r\n                isAuth: true\r\n            };\r\n\r\n        case USER_LOGOUT:\r\n            return {\r\n                ...state,\r\n                isAuth: false\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n    ;\r\n};\r\n\r\nexport default auth;","import {AnyAction} from 'redux';\r\nimport {CHAT_MESSAGE_EDIT_MODE, CHAT_TYPE, DIALOGUE_LIST, MESSAGE_EDIT_PANEL} from '../types';\r\n\r\nexport interface IOptionState {\r\n    dialogueListOpen: boolean,\r\n    messageEditPanel: number,\r\n    curMessageType: number,\r\n    messageEditText: number\r\n}\r\n\r\nexport const initialState: IOptionState = {\r\n    dialogueListOpen: false,\r\n    messageEditPanel: 0,\r\n    curMessageType: 1,\r\n    messageEditText: 0\r\n};\r\n\r\nconst option = (state = initialState, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case MESSAGE_EDIT_PANEL:\r\n            return {\r\n                ...state,\r\n                messageEditPanel: action.payload\r\n            };\r\n        case CHAT_TYPE:\r\n            return {\r\n                ...state,\r\n                curMessageType: action.payload\r\n            }\r\n        case DIALOGUE_LIST:\r\n            return {\r\n                ...state,\r\n                dialogueListOpen: action.payload === \"auto\" ? !state.dialogueListOpen : action.payload\r\n            };\r\n        case CHAT_MESSAGE_EDIT_MODE:\r\n            return {\r\n                ...state,\r\n                messageEditText: action.payload\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default option;","import {AnyAction} from 'redux';\r\nimport {IDialogue} from '../../interfaces';\r\nimport {DIALOGUES_FAILURE, DIALOGUES_REQUEST, DIALOGUES_SUCCESS} from \"../types\";\r\n\r\nexport interface IDialogueState {\r\n    dialogues: IDialogue[],\r\n    loading: boolean,\r\n    error: any\r\n}\r\n\r\nexport const initialState: IDialogueState = {\r\n    dialogues: [],\r\n    loading: true,\r\n    error: null\r\n};\r\n\r\nconst dialogues = (state = initialState, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case DIALOGUES_REQUEST:\r\n            return {\r\n                ...state,\r\n                dialogues: []\r\n            };\r\n        case DIALOGUES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                dialogues: action.payload,\r\n                loading: false\r\n            };\r\n        case DIALOGUES_FAILURE:\r\n            return {\r\n                ...state,\r\n                dialogues: [],\r\n                loading: false,\r\n                error: action.payload,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default dialogues;","import {combineReducers} from 'redux';\r\nimport message, {IMessageState} from './redusers/message';\r\nimport auth, {IAuthState} from './redusers/auth';\r\nimport option, {IOptionState} from \"./redusers/option\";\r\nimport dialogues, {IDialogueState} from \"./redusers/dialogues\";\r\n\r\nexport interface RootState {\r\n    auth: IAuthState\r\n    message: IMessageState\r\n    option: IOptionState\r\n    dialogues: IDialogueState\r\n}\r\n\r\nexport default combineReducers<RootState>({\r\n    auth,\r\n    message,\r\n    option,\r\n    dialogues\r\n})","import {applyMiddleware, createStore} from 'redux';\r\nimport rootReducer from './reduser';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\n//const store = createStore(rootReducer);\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\nexport default store;","import {DIALOGUE_LIST, CHAT_MESSAGE_EDIT_MODE, CHAT_TYPE, MESSAGE_EDIT_PANEL} from \"../types\";\r\n\r\nexport const dialogueListToggle = (opened: string | boolean = \"auto\") => {\r\n    return {\r\n        type: DIALOGUE_LIST,\r\n        payload: opened\r\n    };\r\n};\r\n\r\nexport const messageEditTextOn = (idMessage: number | boolean) => {\r\n    return {\r\n        type: CHAT_MESSAGE_EDIT_MODE,\r\n        payload: idMessage\r\n    };\r\n};\r\n\r\nexport const messagePanelOpen = (idMessage: number) => {\r\n    return {\r\n        type: MESSAGE_EDIT_PANEL,\r\n        payload: idMessage\r\n    };\r\n};\r\n\r\nexport const messageTypeChange = (idType: number) => {\r\n    return {\r\n        type: CHAT_TYPE,\r\n        payload: idType\r\n    };\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport './style.scss';\r\nimport classNames from \"classnames\";\r\n\r\ninterface ILoadingProp {\r\n    chat?: boolean\r\n}\r\n\r\nconst Loading: React.FC<ILoadingProp> = ({chat}) => {\r\n    const loadingClasses = classNames(\r\n        'loading-sp m-auto',\r\n        {'loading-sp--for-chat': chat}\r\n    );\r\n\r\n    return (\r\n        <div className={loadingClasses}>\r\n            <div className=\"loading-pulse\">\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;","import React from 'react';\r\nimport './style.scss';\r\nimport classNames from \"classnames\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport * as Icons from '@fortawesome/free-solid-svg-icons'\r\nimport {IDialogue, IOutClickRef} from \"../../interfaces\";\r\nimport Loading from \"../Loading\";\r\n\r\ninterface IDialogueList {\r\n    divRef: IOutClickRef\r\n    dialogues: IDialogue[]\r\n    loading: boolean,\r\n    curMessageType: number\r\n    dialogueListOpen: boolean,\r\n    messageTypeChangeHandler(id: number, e: React.MouseEvent): void\r\n}\r\n\r\nconst DialogueList: React.FC<IDialogueList> = (\r\n    {divRef, dialogues, loading, curMessageType, dialogueListOpen, messageTypeChangeHandler}\r\n) => {\r\n\r\n    let messageClasses = classNames(\r\n        'dialogue-list bg-dark',\r\n        {'dialogue-list--open shadow': dialogueListOpen}\r\n    );\r\n\r\n    let dialogueItemClasses = (id: number, curMessageType: number) => {\r\n        return classNames(\r\n            'dialogue-list__item list-group-item text-light',\r\n            {'dialogue-list__item--active': id === curMessageType}\r\n        );\r\n    }\r\n\r\n    const getIcon = (objIcon: { [k: string]: any } = {}, iconName: string) => {\r\n        try {\r\n            return <FontAwesomeIcon className=\"mr-3\" icon={objIcon[iconName]}/>\r\n        } catch (e) {\r\n            return null\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={messageClasses} ref={divRef}>\r\n            <h3 className=\"sidebar-heading text-white h5 p-4 text-center\">Dialogue List</h3>\r\n            <ul className=\"dialogue-list__list-group list-group\">\r\n                {\r\n                    loading ? <Loading/> :\r\n                        dialogues.map(({id, icon, name}) => (\r\n                            <li key={'dialogue' + id}\r\n                                className={dialogueItemClasses(id, curMessageType)}\r\n                                onClick={e => messageTypeChangeHandler(id, e)}\r\n                            >\r\n                                {getIcon(Icons, icon)}\r\n                                <span>{name}</span>\r\n                            </li>\r\n                        ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogueList;","import {DIALOGUES_FAILURE, DIALOGUES_REQUEST, DIALOGUES_SUCCESS} from \"../types\";\r\nimport {getDialogues} from \"../../utils/getDataFunc\";\r\nimport {IDialogue} from \"../../interfaces\";\r\n\r\n\r\nexport const dialogueRequest = () => {\r\n    return {\r\n        type: DIALOGUES_REQUEST\r\n    }\r\n};\r\nexport const dialogueLoad = (data: IDialogue[]) => {\r\n    return {\r\n        type: DIALOGUES_SUCCESS,\r\n        payload: data\r\n    }\r\n};\r\nexport const dialogueError = (error: any) => {\r\n    return {\r\n        type: DIALOGUES_FAILURE,\r\n        payload: error\r\n    }\r\n};\r\n\r\n\r\nexport const getDialoguesList = () => (dispatch: any) => {\r\n    dispatch(dialogueRequest());\r\n    getDialogues().then(\r\n        ({data}) => {\r\n            setTimeout(() => {\r\n                dispatch(dialogueLoad(data))\r\n            }, 1000);//server delay imitation\r\n        },\r\n        error => {\r\n            dispatch(dialogueError(error))\r\n        }\r\n    )\r\n}","import axios from \"axios\";\r\n\r\nexport const getDialogues = () => {\r\n    return axios.get(\"data/dialogues.json\", {headers: {'Access-Control-Allow-Origin': '*'}});\r\n}\r\n\r\nexport const getMessages = () => {\r\n    return axios.get(\"data/messages.json\", {headers: {'Access-Control-Allow-Origin': '*'}});\r\n}","export const LocalStorageMess = {\r\n    LOCAL_STORAGE_KEY: \"Local-Storage-Chat:messages\",\r\n\r\n    getChat: function () {\r\n        return JSON.parse(localStorage.getItem(this.LOCAL_STORAGE_KEY) || '[]');\r\n    },\r\n    setChat: function <T>(data: T[]) {\r\n        localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(data));\r\n    }\r\n}\r\n\r\nexport const LocalStorageCurUser = {\r\n    LOCAL_STORAGE_KEY: \"Local-Storage-Chat:user\",\r\n    getUser: function () {\r\n        return localStorage.getItem(this.LOCAL_STORAGE_KEY) || \"\";\r\n    },\r\n    setUser: function (userName: string) {\r\n        localStorage.setItem(this.LOCAL_STORAGE_KEY, userName);\r\n    }\r\n}\r\n\r\nexport const LocalStorageSiteVisited = () => {\r\n    const LOCAL_STORAGE_KEY = \"Local-Storage-Chat:visited\";\r\n    const visited = localStorage.getItem(LOCAL_STORAGE_KEY) || \"\";\r\n    if (visited) {\r\n        return true;\r\n    } else {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, \"true\");\r\n        return false\r\n    }\r\n}\r\n\r\nexport const LocalStorageOpt = {\r\n    LOCAL_STORAGE_KEY: \"Local-Storage-Chat:option\",\r\n\r\n    CUR_MESSAGE_TYPE_ID: \"CUR_MESSAGE_TYPE_ID\",\r\n    DIALOGUE_LIST_OPEN: \"DIALOGUE_LIST_OPEN\",\r\n\r\n    getOption: function (user: string, option: string) {\r\n        const ls = JSON.parse(localStorage.getItem(this.LOCAL_STORAGE_KEY) || '{}');\r\n        if (!ls[user]) {\r\n            ls[user] = {};\r\n        }\r\n        return ls[user][option] || \"\";\r\n    },\r\n    setOption: function (user: string, option: string, value: string | number | boolean) {\r\n        const ls = JSON.parse(localStorage.getItem(this.LOCAL_STORAGE_KEY) || '{}');\r\n        if (!ls[user]) {\r\n            ls[user] = {};\r\n        }\r\n        ls[user][option] = value;\r\n        localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(ls));\r\n    }\r\n}","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../redux/reduser\";\r\nimport useOnclickOutside from 'react-cool-onclickoutside';\r\nimport {dialogueListToggle, messageTypeChange} from '../redux/actions/option';\r\nimport DialogueList from \"../components/DialogueList\";\r\nimport {getDialoguesList} from \"../redux/actions/dialogues\";\r\nimport {LocalStorageOpt} from '../utils/localStorage';\r\nimport {initialState as initialOption} from \"../redux/redusers/option\";\r\n\r\nexport const dialogOutclickClassIgnor = \"dialogListIgnor\";\r\n\r\nconst DialogueListContainer: React.FC = () => {\r\n    const {\r\n        auth: {curUser},\r\n        option: {dialogueListOpen, curMessageType},\r\n        dialogues: {dialogues, loading}\r\n    } = useSelector((state: RootState) => state);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialoguesList());\r\n\r\n        if (LocalStorageOpt.getOption(curUser, LocalStorageOpt.DIALOGUE_LIST_OPEN)) {\r\n            dispatch(dialogueListToggle());\r\n        }\r\n\r\n        const oldMesType = LocalStorageOpt.getOption(curUser, LocalStorageOpt.CUR_MESSAGE_TYPE_ID);\r\n        oldMesType ? dispatch(messageTypeChange(oldMesType)) : dispatch(messageTypeChange(initialOption.curMessageType));\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        LocalStorageOpt.setOption(curUser, LocalStorageOpt.DIALOGUE_LIST_OPEN, dialogueListOpen);\r\n    }, [dialogueListOpen])\r\n\r\n    const divRef = useOnclickOutside(\r\n        () => {\r\n            if (dialogueListOpen) {\r\n                dispatch(dialogueListToggle(false));\r\n            }\r\n        }, {ignoreClass: dialogOutclickClassIgnor}\r\n    );\r\n\r\n    const messageTypeChangeHandler = (id: number, e: React.MouseEvent) => {\r\n        e.preventDefault();\r\n\r\n        LocalStorageOpt.setOption(curUser, LocalStorageOpt.CUR_MESSAGE_TYPE_ID, id);\r\n\r\n        dispatch(messageTypeChange(id));\r\n        dispatch(dialogueListToggle(false));\r\n    }\r\n\r\n    const data = {\r\n        divRef,\r\n        dialogues,\r\n        loading,\r\n        curMessageType,\r\n        dialogueListOpen,\r\n        messageTypeChangeHandler\r\n    }\r\n\r\n    return <DialogueList {...data} />\r\n}\r\n\r\nexport default DialogueListContainer;","import {IMessage} from \"../../interfaces\";\r\nimport {getMessages} from \"../../utils/getDataFunc\";\r\nimport {LocalStorageSiteVisited} from \"../../utils/localStorage\";\r\nimport {\r\n    MESSAGES_SUCCESS,\r\n    MESSAGES_REQUEST,\r\n    MESSAGES_FAILURE,\r\n    CHAT_MESSAGE_ADD,\r\n    CHAT_MESSAGE_DELETE,\r\n    CHAT_MESSAGE_EDIT\r\n} from \"../types\";\r\n\r\nconst messagesRequest = () => {\r\n    return {\r\n        type: MESSAGES_REQUEST\r\n    };\r\n};\r\nconst messagesLoad = (messages: IMessage[]) => {\r\n    return {\r\n        type: MESSAGES_SUCCESS,\r\n        payload: messages\r\n    };\r\n};\r\n\r\nconst messagesError = (error: any) => {\r\n    return {\r\n        type: MESSAGES_FAILURE,\r\n        payload: error\r\n    };\r\n};\r\n\r\nexport const messageAdd = (newMessage: IMessage) => {\r\n    return {\r\n        type: CHAT_MESSAGE_ADD,\r\n        payload: newMessage\r\n    };\r\n};\r\n\r\nexport const messageEdit = (idMessage: number, messageText: string) => {\r\n    return {\r\n        type: CHAT_MESSAGE_EDIT,\r\n        payload: {idMessage, messageText}\r\n    };\r\n};\r\n\r\nexport const messageDelete = (idMessage: number) => {\r\n    return {\r\n        type: CHAT_MESSAGE_DELETE,\r\n        payload: idMessage\r\n    };\r\n};\r\n\r\nexport const getAllMessages = (localStorageMessages: IMessage[]) => (dispatch: any) => {\r\n    dispatch(messagesRequest());\r\n\r\n    if (LocalStorageSiteVisited() || localStorageMessages.length > 0) {\r\n        setTimeout(() => {\r\n            dispatch(messagesLoad(localStorageMessages));\r\n        }, 1000);//server delay imitation\r\n    } else {\r\n        getMessages().then(\r\n            ({data}) => {\r\n                setTimeout(() => {\r\n                    dispatch(messagesLoad(data))\r\n                }, 1000);//server delay imitation\r\n            },\r\n            error => {\r\n                dispatch(messagesError(error))\r\n            }\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './style.scss';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport * as Icons from '@fortawesome/free-solid-svg-icons'\r\nimport {IOutClickRef} from \"../../interfaces\";\r\n\r\ninterface IMessageEditPanel {\r\n    onEditMessage(messageId: number, event: React.MouseEvent): void\r\n    onDeleteMessage(messageId: number, event: React.MouseEvent): void\r\n    divRef: IOutClickRef\r\n    messageEditPanel: number\r\n}\r\n\r\nconst MessageEditPanel: React.FC<IMessageEditPanel> = ({onEditMessage, onDeleteMessage, divRef, messageEditPanel}) => {\r\n    return (\r\n        <div className=\"navbar-chat__edit-panel\" ref={divRef}>\r\n            <div className=\"edit-message mr-3\">\r\n                <button type=\"button\"\r\n                        title=\"Edit message\"\r\n                        className=\"edit-message__btn btn btn-outline-light\"\r\n                        onClick={e => onEditMessage(messageEditPanel, e)}\r\n                >\r\n                    <FontAwesomeIcon icon={Icons.faPencilAlt}/>\r\n                </button>\r\n            </div>\r\n            <div className=\"edit-message\">\r\n                <button type=\"button\"\r\n                        title=\"Delete message\"\r\n                        className=\"edit-message__btn btn btn-outline-light\"\r\n                        onClick={e => onDeleteMessage(messageEditPanel, e)}\r\n                >\r\n                    <FontAwesomeIcon icon={Icons.faTrashAlt}/>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageEditPanel;","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../redux/reduser\";\r\nimport {messageEditTextOn, messagePanelOpen} from \"../redux/actions/option\";\r\nimport {messageDelete} from \"../redux/actions/message\";\r\nimport useOnclickOutside from \"react-cool-onclickoutside\";\r\nimport MessageEditPanel from \"../components/MessageEditPanel\";\r\n\r\nexport const messageOutclickClassIgnor = 'messageOutclickIgnor';\r\n\r\nconst MessageEditPanelContainer: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const {messageEditPanel} = useSelector((state: RootState) => state.option);\r\n\r\n    const onEditMessage = (messageId: number, event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n        dispatch(messageEditTextOn(messageId));\r\n    }\r\n    const onDeleteMessage = (messageId: number, event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n        dispatch(messageDelete(messageId));\r\n    }\r\n\r\n    const divRef = useOnclickOutside(\r\n        () => {\r\n            if (messageEditPanel) {\r\n                dispatch(messagePanelOpen(0));\r\n            }\r\n        }, {ignoreClass: messageOutclickClassIgnor}\r\n    );\r\n\r\n    const data = {\r\n        onEditMessage,\r\n        onDeleteMessage,\r\n        divRef,\r\n        messageEditPanel\r\n    }\r\n\r\n    return <MessageEditPanel {...data} />\r\n}\r\n\r\nexport default MessageEditPanelContainer;","import React from 'react';\r\nimport './style.scss';\r\nimport classNames from 'classnames';\r\nimport {messageOutclickClassIgnor} from \"../../containers/MessageEditPanel\";\r\nimport {IMessage} from \"../../interfaces\";\r\n\r\ninterface IMessageProp {\r\n    reFormatDate: string\r\n    curUser: string\r\n    dataProp: IMessage\r\n    messageEditPanel: number | boolean\r\n    messagePanel(id: number, e: React.MouseEvent): void\r\n}\r\n\r\nconst Message: React.FC<IMessageProp> = (\r\n    {reFormatDate, curUser, dataProp, messageEditPanel, messagePanel}\r\n) => {\r\n    const {id, text, author} = dataProp;\r\n\r\n    const messageClasses = classNames(\r\n        'message', {\r\n            'message--my': curUser === author,\r\n            'message--edited': messageEditPanel === id\r\n        }\r\n    );\r\n    const messageBlockClasses = classNames(\r\n        'message__block',\r\n        {[messageOutclickClassIgnor]: curUser === author}\r\n    );\r\n\r\n    return (\r\n        <div className={messageClasses}>\r\n            <div className={messageBlockClasses}>\r\n                <div className=\"message__text rounded py-2 px-3 mb-1\"\r\n                     onClick={e => messagePanel(id, e)}\r\n                >\r\n                    {text}\r\n                </div>\r\n                <div className=\"message__info small text-muted\">\r\n                    <span className=\"message__author\">{author}</span>\r\n                    <span className=\"message__date\">{reFormatDate}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {IMessage} from '../interfaces';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../redux/reduser\";\r\nimport {timeConverter} from '../utils/timeConverter';\r\nimport {messagePanelOpen} from \"../redux/actions/option\";\r\nimport Message from \"../components/Message\";\r\n\r\ninterface IPropsMessage {\r\n    dataProp: IMessage\r\n}\r\n\r\nconst MessageContainer: React.FC<IPropsMessage> = ({dataProp}) => {\r\n    const dispatch = useDispatch();\r\n    const {auth: {curUser}, option: {messageEditPanel}} = useSelector((state: RootState) => state);\r\n    const {author, date} = dataProp;\r\n    const reFormatDate = timeConverter(date);\r\n\r\n\r\n    const messagePanel = (id: number, e: React.MouseEvent) => {\r\n        e.preventDefault();\r\n        if (curUser === author) {\r\n            dispatch(messagePanelOpen(id));\r\n        }\r\n    }\r\n\r\n    const data = {\r\n        reFormatDate,\r\n        curUser,\r\n        dataProp,\r\n        messageEditPanel,\r\n        messagePanel\r\n    }\r\n\r\n    return <Message {...data}/>\r\n}\r\n\r\nexport default MessageContainer;","export const timeConverter = (timestamp: number): string => {\r\n    const a = new Date(timestamp);\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    const month = months[a.getMonth()];\r\n    const day = a.getDate();\r\n    const hour = a.getHours();\r\n    const min = a.getMinutes();\r\n    return `${day} ${month} ${hour}:${min}`;\r\n}","import React, {RefObject} from 'react';\r\nimport './style.scss';\r\nimport {IMessage} from \"../../interfaces\";\r\nimport classNames from \"classnames\";\r\nimport MessageContainer from \"../../containers/Message\";\r\nimport Loading from \"../Loading\";\r\n\r\ninterface IChatBox {\r\n    dialogueListOpen: boolean,\r\n    messagesRef: RefObject<HTMLDivElement>,\r\n    loading: boolean,\r\n    messages: IMessage[]\r\n}\r\n\r\nconst ChatBox: React.FC<IChatBox> = ({dialogueListOpen, messagesRef, loading, messages}) => {\r\n    let chatBoxClassNames = classNames(\r\n        \"chat__box p-3 bg-white\",\r\n        {\"chat__box--blured\": dialogueListOpen}\r\n    )\r\n\r\n    return (\r\n        <div className={chatBoxClassNames} ref={messagesRef}>\r\n            {\r\n                loading\r\n                    ? <Loading chat={true}/>\r\n                    : messages.map(message => <MessageContainer key={message.id} dataProp={message}/>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBox;","import React, {useEffect, useRef} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getAllMessages} from '../redux/actions/message';\r\nimport {LocalStorageMess} from '../utils/localStorage';\r\nimport {IMessage} from \"../interfaces\";\r\nimport {RootState} from \"../redux/reduser\";\r\nimport ChatBox from \"../components/ChatBox\";\r\n\r\n\r\nconst ChatBoxContainer: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const messagesRef = useRef<HTMLDivElement>(null);\r\n    const {message: {messages, loading}, option: {dialogueListOpen, curMessageType}} = useSelector((state: RootState) => state);\r\n\r\n    const scrollToBottom = () => {\r\n        messagesRef.current!.scrollTo(0, messagesRef.current!.scrollHeight);\r\n    }\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n        dispatch(getAllMessages(LocalStorageMess.getChat()));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n        LocalStorageMess.setChat<IMessage>(messages);\r\n    }, [messages, curMessageType])\r\n\r\n    const data = {\r\n        dialogueListOpen,\r\n        messagesRef,\r\n        loading,\r\n        messages: messages.filter(message => message.type === curMessageType)\r\n    }\r\n    return <ChatBox {...data}/>\r\n}\r\n\r\nexport default ChatBoxContainer;","import React, {RefObject} from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport * as Icons from '@fortawesome/free-solid-svg-icons'\r\nimport './style.scss';\r\nimport classNames from \"classnames\";\r\nimport {messageOutclickClassIgnor} from '../../containers/MessageEditPanel';\r\n\r\ninterface IChatForm {\r\n    message: string\r\n    messageEditText: number,\r\n    messageEditPanel: number,\r\n    inputRef: RefObject<HTMLInputElement>,\r\n    changeHandler(event: React.ChangeEvent<HTMLInputElement>): void\r\n    enterForSubmit(event: React.KeyboardEvent, id?: number): void\r\n    clickForSubmit(event: React.MouseEvent, id?: number): void\r\n}\r\n\r\nconst ChatForm: React.FC<IChatForm> = (\r\n    {message, messageEditText, messageEditPanel, inputRef, changeHandler, enterForSubmit, clickForSubmit}\r\n) => {\r\n\r\n    let formClasses = classNames(\r\n        'chat__form bg-light',\r\n        {[messageOutclickClassIgnor]: messageEditText === messageEditPanel}\r\n    );\r\n\r\n    return (\r\n        <form className={formClasses} action=\"#\">\r\n            <div className=\"input-group\">\r\n                <input type=\"textarea\" placeholder=\"Type a message\"\r\n                       className=\"form-control rounded-0 border-0 bg-light shadow-none\"\r\n                       value={message}\r\n                       onChange={e => changeHandler(e)}\r\n                       onKeyPress={e => enterForSubmit(e, messageEditText)}\r\n                       ref={inputRef}\r\n                />\r\n                <div className=\"input-group-append\">\r\n                    <button type=\"submit\"\r\n                            className=\"btn btn-dark shadow-none\"\r\n                            onClick={e => clickForSubmit(e, messageEditText)}\r\n                    >\r\n                        <FontAwesomeIcon icon={Icons.faGreaterThan}/>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ChatForm;","import React, {useEffect, useRef} from 'react';\r\nimport {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {messageAdd, messageEdit} from '../redux/actions/message';\r\nimport {RootState} from \"../redux/reduser\";\r\nimport {IMessage} from '../interfaces';\r\nimport ChatForm from \"../components/ChatForm\";\r\n\r\n\r\nconst ChatFormContainer: React.FC = () => {\r\n    const [message, setMessage] = useState(\"\");\r\n    const addMessageDispatch = useDispatch();\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const {\r\n        message: {messages},\r\n        auth: {curUser},\r\n        option: {curMessageType, messageEditText, messageEditPanel}\r\n    } = useSelector((state: RootState) => state);\r\n\r\n    const newMessageData: IMessage = {\r\n        id: Date.now(),\r\n        author: curUser,\r\n        type: curMessageType,\r\n        date: Date.now(),\r\n        text: message\r\n    }\r\n\r\n    let messageEditElement: IMessage[];\r\n\r\n    useEffect(() => {\r\n        if (messageEditText) {\r\n            messageEditElement = messages.filter(item => item.id === messageEditText);\r\n            if (messageEditElement.length) setMessage(messageEditElement[0].text);\r\n\r\n            setTimeout(() => {\r\n                inputRef.current!.focus();\r\n            }, 100);\r\n        }\r\n\r\n        if (messageEditPanel !== messageEditText) {\r\n            setMessage(\"\");\r\n        }\r\n    }, [messageEditPanel, messageEditText])\r\n\r\n\r\n    const addNewMessage = (event: React.KeyboardEvent | React.MouseEvent, id?: number) => {\r\n        event.preventDefault();\r\n        if (message.trim() !== '') {\r\n            if (id) {\r\n                addMessageDispatch(messageEdit(id, message));\r\n                setMessage(\"\");\r\n            } else {\r\n                addMessageDispatch(messageAdd(newMessageData));\r\n                setMessage(\"\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setMessage(event.target.value);\r\n    }\r\n\r\n    const enterForSubmit = (event: React.KeyboardEvent, id?: number) => {\r\n        if (event.key === \"Enter\") {\r\n            addNewMessage(event, id);\r\n        }\r\n    }\r\n\r\n    const clickForSubmit = (event: React.MouseEvent, id?: number) => {\r\n        addNewMessage(event, id);\r\n    }\r\n\r\n    const data = {\r\n        message,\r\n        messageEditText,\r\n        messageEditPanel,\r\n        inputRef,\r\n        changeHandler,\r\n        enterForSubmit,\r\n        clickForSubmit\r\n    }\r\n\r\n    return <ChatForm {...data}/>\r\n}\r\n\r\nexport default ChatFormContainer;","import {USER_LOGIN, USER_LOGOUT} from \"../types\";\r\n\r\nexport const userLogin = (name: string) => {\r\n    return {\r\n        type: USER_LOGIN,\r\n        payload: name\r\n    };\r\n};\r\n\r\nexport const userLogout = () => {\r\n    return {\r\n        type: USER_LOGOUT\r\n    };\r\n};","import React from 'react';\r\nimport './style.scss';\r\nimport MessageEditPanelContainer from \"../../containers/MessageEditPanel\";\r\nimport {dialogOutclickClassIgnor} from \"../../containers/DialogueList\";\r\n\r\ninterface IChatNav {\r\n    messageEditPanel: number | boolean\r\n    onLogoutHandler(event: React.MouseEvent): void\r\n    onChatListToggle(event: React.MouseEvent): void\r\n}\r\n\r\nconst ChatNav: React.FC<IChatNav> = ({messageEditPanel, onLogoutHandler, onChatListToggle}) => {\r\n    return (\r\n        <nav className=\"chat__nav navbar-chat navbar navbar-dark bg-dark shadow\">\r\n            <button className={`navbar-chat__toggler navbar-toggler ${dialogOutclickClassIgnor}`}\r\n                    type=\"button\"\r\n                    onClick={e => onChatListToggle(e)}\r\n            >\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <h2 className=\"navbar-brand navbar-chat__name\">\r\n                TS-Chat\r\n            </h2>\r\n            {\r\n                messageEditPanel\r\n                    ?\r\n                    <MessageEditPanelContainer/>\r\n                    :\r\n                    <button type=\"button\"\r\n                            className={`navbar-chat__logout btn btn-outline-light ${dialogOutclickClassIgnor}`}\r\n                            onClick={e => onLogoutHandler(e)}\r\n                    >\r\n                        Logout\r\n                    </button>\r\n            }\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default ChatNav;","import React from 'react';\r\nimport {userLogout} from \"../redux/actions/auth\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LocalStorageCurUser} from \"../utils/localStorage\";\r\nimport {dialogueListToggle} from '../redux/actions/option';\r\nimport {RootState} from \"../redux/reduser\";\r\nimport ChatNav from \"../components/ChatNav\";\r\n\r\nconst ChatNavContainer: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const {messageEditPanel} = useSelector((state: RootState) => state.option);\r\n\r\n    const onLogoutHandler = (event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n        LocalStorageCurUser.setUser(\"\");\r\n        dispatch(userLogout());\r\n        window.location.reload();\r\n    }\r\n\r\n    const onChatListToggle = (event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n        dispatch(dialogueListToggle());\r\n    }\r\n\r\n    const data = {\r\n        messageEditPanel,\r\n        onLogoutHandler,\r\n        onChatListToggle\r\n    }\r\n\r\n    return <ChatNav {...data}/>\r\n}\r\n\r\nexport default ChatNavContainer;","import React from 'react';\r\nimport './style.scss';\r\nimport DialogueListContainer from \"../../containers/DialogueList\";\r\nimport ChatBoxContainer from \"../../containers/ChatBox\";\r\nimport ChatFormContainer from \"../../containers/ChatForm\";\r\nimport ChatNavContainer from \"../../containers/ChatNav\";\r\n\r\nconst Chat: React.FC = () => {\r\n    return (\r\n        <div className=\"chat-wrapper\">\r\n            <div className=\"chat rounded-lg overflow-hidden shadow-lg\">\r\n                <DialogueListContainer/>\r\n                <ChatNavContainer/>\r\n                <ChatBoxContainer/>\r\n                <ChatFormContainer/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;","import React from 'react';\r\nimport './style.scss';\r\n\r\ninterface ILoginForm {\r\n    userName: string\r\n    onChangeHandler(event: React.ChangeEvent<HTMLInputElement>): void\r\n    onSubmitHandler(userName: string, event: React.MouseEvent): void\r\n}\r\n\r\nconst LoginForm: React.FC<ILoginForm> = ({userName, onChangeHandler, onSubmitHandler}) => {\r\n    return (\r\n        <div className=\"login container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"login__bg-image col-md-6 d-none d-md-flex\"></div>\r\n                <div className=\"login__form col-md-6 bg-light d-flex align-items-center py-5\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-10 col-xl-7 mx-auto text-center\">\r\n                                <h1 className=\"h3 mb-4\">LocalStorage Chat</h1>\r\n                                <form>\r\n                                    <div className=\"form-group mb-3\">\r\n                                        <input id=\"inputLogin\" type=\"text\" placeholder=\"Login\"\r\n                                               className=\"form-control border-0 shadow-sm px-4\"\r\n                                               value={userName}\r\n                                               onChange={e => onChangeHandler(e)}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group mb-3\">\r\n                                        <input id=\"inputPassword\" type=\"password\" placeholder=\"Password\"\r\n                                               className=\"form-control border-0 shadow-sm px-4\"/>\r\n                                    </div>\r\n                                    <button type=\"submit\"\r\n                                            className=\"btn btn-dark btn-block text-uppercase mb-2 shadow-sm\"\r\n                                            onClick={e => onSubmitHandler(userName, e)}\r\n                                    >\r\n                                        Sign in\r\n                                    </button>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {userLogin} from '../redux/actions/auth';\r\nimport {LocalStorageCurUser} from '../utils/localStorage';\r\nimport LoginForm from \"../components/LoginForm\";\r\n\r\nconst LoginFormContainer: React.FC = (props) => {\r\n    const [userName, setUserName] = useState<string>(\"\");\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        const savedUser = LocalStorageCurUser.getUser().trim();\r\n        if (savedUser !== \"\") {\r\n            dispatch(userLogin(savedUser));\r\n        }\r\n    }, []);\r\n\r\n    const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        event.preventDefault();\r\n        setUserName(event.target.value);\r\n    }\r\n\r\n    const onSubmitHandler = (userName: string, event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n        let curUserName = userName.trim();\r\n        if (curUserName !== \"\") {\r\n            LocalStorageCurUser.setUser(curUserName);\r\n            dispatch(userLogin(curUserName));\r\n        }\r\n    }\r\n\r\n    const data = {\r\n        userName,\r\n        onChangeHandler,\r\n        onSubmitHandler\r\n    }\r\n\r\n    return <LoginForm {...data}/>\r\n}\r\n\r\nexport default LoginFormContainer;","import React from 'react';\r\nimport Chat from \"../Chat\";\r\nimport LoginFormContainer from \"../../containers/LoginForm\";\r\nimport './style.scss'\r\n\r\ninterface IAppProps {\r\n    isAuth: boolean\r\n}\r\n\r\nconst App: React.FC<IAppProps> = ({isAuth}) => {\r\n    return (\r\n        <React.Fragment>\r\n            {isAuth ? <Chat/> : <LoginFormContainer/>}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../redux/reduser\";\r\nimport App from \"../components/App\";\r\n\r\n\r\nconst AppContainer: React.FC = (props) => {\r\n    const {isAuth} = useSelector((state: RootState) => state.auth);\r\n    const data = {\r\n        isAuth\r\n    }\r\n    return <App {...data}/>\r\n}\r\n\r\nexport default AppContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport AppContainer from \"./containers/App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}